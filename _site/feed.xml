<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeSik의 개발 공방 Tech Blog</title>
    <description>Tech Blog Web, Server, Computer Science</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Mar 2021 23:45:02 +0900</pubDate>
    <lastBuildDate>Tue, 09 Mar 2021 23:45:02 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>[Github 블로그 호스팅] 개발 공방의 시작</title>
        <description>&lt;h1 id=&quot;주인장-소개&quot;&gt;&lt;strong&gt;주인장 소개&lt;/strong&gt;&lt;/h1&gt; &lt;hr /&gt; &lt;p&gt;이 글을 보실 분들이 계실지는 모르겠지만, 중학생 이후로 처음 블로그를 파본 날을 기념하기 위해서 포스팅을 남깁니다 ㅎ &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;h3 id=&quot;누구시죠&quot;&gt;&lt;strong&gt;누구시죠?&lt;/strong&gt;&lt;/h3&gt; &lt;/blockquote&gt; &lt;p&gt;저는 &lt;strong&gt;서건식&lt;/strong&gt;이라고 합니다.&lt;/p&gt; &lt;p&gt;한양대학교 컴퓨터 소프트웨어 학부 3학년 2학기를 수료하고, 현재 코딩 교육 스타트업 팀스파르타의 인턴으로 활동할 예정입니다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;학교에 들어왔을 때는 개발이 너무 어렵고 재미가 없었습니다. 그 이유는 1학년 1학기 소프트웨어 입문을 담당하셨던 교수님께서 python이 뭔지도 몰랐던 저에게 추상화, 자료구조, 알고리즘 등의 가르침을 주신 덕분에 흥미를 잃게되었죠… :skull: &lt;br /&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;하지만 어쩌다가 삼성전자와 디센터가 주관한 블록체인 교육&amp;amp;해커톤 프로그램인 &lt;strong&gt;FOUNDERS 3기&lt;/strong&gt;에 참여하고, 유저들의 Request와 데이터들을 다루고 만족감을 주는...</description>
        <pubDate>Sun, 07 Mar 2021 23:40:45 +0900</pubDate>
        <link>http://localhost:4000/First-Post/</link>
        <guid isPermaLink="true">http://localhost:4000/First-Post/</guid>
        
        <category>Life</category>
      </item>
    
      <item>
        <title>Javascript 콘솔로 입력받기 (feat.제너레이터)</title>
        <description>&lt;p class=&quot;callout&quot;&gt; 💡JS 콘솔로 입력받는 방법&lt;/p&gt; &lt;p&gt;파이썬이나 C++과 같은 다른 언어들은 입력받는 방법이 쉽지만 JS는 좀 까다롭다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readline&lt;/code&gt;을 이용해야 한다.&lt;/p&gt; &lt;p&gt;몇몇 블로그에서 readline을 이용하여 입력받는 방법을 찾았다. 출처는 포스팅 아래에 달아두었다.&lt;/p&gt; &lt;h3 id=&quot;콘솔-입력-방법&quot;&gt;콘솔 입력 방법&lt;/h3&gt; &lt;p&gt;readline을 이용하여 &lt;em&gt;이벤트&lt;/em&gt; 형식으로 입력받는 방법이다. 입력값이 들어오면 그때 함수를 실행한다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span...</description>
        <pubDate>Wed, 06 Jan 2021 23:40:45 +0900</pubDate>
        <link>http://localhost:4000/console-input-using-generator/</link>
        <guid isPermaLink="true">http://localhost:4000/console-input-using-generator/</guid>
        
        <category>Life</category>
      </item>
    
      <item>
        <title>2020-12-08 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 12월 08일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;코드 풀이 사이트&lt;/li&gt; &lt;li&gt;네트워크 책 구매&lt;/li&gt; &lt;li&gt;배너 이미지 생성 사이트&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;코드-풀이-사이트&quot;&gt;코드 풀이 사이트&lt;/h3&gt; &lt;p&gt;알고리즘 스터디를 다시 시작했다. 각자 일주일에 세 문제씩 푸는 것인데, 나는 알고리즘 외에 다른 코딩연습도 병행하려고 한다.&lt;br /&gt; 찾은 사이트는 &lt;strong&gt;codewars&lt;/strong&gt;다. (링크: &lt;a href=&quot;https://www.codewars.com/&quot;&gt;https://www.codewars.com/&lt;/a&gt;) 사용법은 이 블로그에 잘 정리되어 있다(&lt;a href=&quot;https://ddka.tistory.com/entry/code-war-%EC%82%AC%EC%9A%A9%EB%B2%95&quot;&gt;https://ddka.tistory.com/entry/code-war-%EC%82%AC%EC%9A%A9%EB%B2%95&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;구현이나 기술 트릭같은 것들을 연습할 수 있는 사이튼데, 일주일에 세 개 이상은 푸는 것이 목표다. 다른 사람들이 어떻게 풀었는지 보고 배울 수 있어 실력향상에 도움이 될 것 같다.&lt;/p&gt; &lt;h3 id=&quot;책-구입&quot;&gt;책 구입&lt;/h3&gt; &lt;p&gt;‘&lt;a href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=243233851&quot;&gt;성공과 실패를 구분하는 1%의 네트워크 원리&lt;/a&gt;‘라는 책을 구매했다.&lt;br /&gt; 브라우저와 통신하는 것부터...</description>
        <pubDate>Tue, 08 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-12-08-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-12-08-TIL/</guid>
        
        <category>algorithm</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>vscode에 eslint와 prettier 설정하기</title>
        <description>&lt;p class=&quot;callout&quot;&gt; 💡 개발환경을 eslint와 prettier로 설정해보자 &lt;/p&gt; &lt;h2 id=&quot;환경설정&quot;&gt;환경설정&lt;/h2&gt; &lt;p&gt;팀 프로젝트를 할 때, 우리는 제일 먼저 개발환경에 대한 명세부터 정한다. 어떤 OS를 쓸 것인가, 어떤 언어를 사용할 것인가, 얼마동안 개발할 것인가 하는 것들 말이다.&lt;br /&gt; 그리고 코딩 스타일에 대한 규칙도 정한다. 들여쓰기를 어떻게 할 것인가, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; 를 코드 옆에 붙일 것인가 밑에 붙일 것인가, 그런 것들 말이다.&lt;br /&gt; ESLint와 Prettier는 이러한 코드 규약을 지킬 수 있게 도와주는 도구다. 이 포스팅에서는 ESLint와 Prettier를 이용하여 일관성 있는 스타일로 코드를 작성하는 방법을 정리한다.&lt;/p&gt; &lt;p&gt;우선 vscode와 node.js를 다운받는다.&lt;/p&gt; &lt;h3 id=&quot;vscode&quot;&gt;vsCode&lt;/h3&gt; &lt;p&gt;IDE는 vsCode를 이용할 것이다. 확장프로그램을 깔기도 쉽고, 가볍고 빠르기 때문이다.&lt;br /&gt;...</description>
        <pubDate>Mon, 07 Dec 2020 07:55:45 +0900</pubDate>
        <link>http://localhost:4000/vscode-eslint-prettier-setting/</link>
        <guid isPermaLink="true">http://localhost:4000/vscode-eslint-prettier-setting/</guid>
        
        <category>tips</category>
      </item>
    
      <item>
        <title>javascript 공부할때 참고할 링크</title>
        <description>&lt;p class=&quot;callout&quot;&gt; 💡 Javascript를 공부하며 참고할만한 블로그나 글 모음 &lt;/p&gt; &lt;p&gt;TIL 참고할만한 블로그&lt;br /&gt; &lt;a href=&quot;https://velog.io/@yujo/2020-11-24%ED%99%94-TIL-196-%EC%8A%A4%ED%84%B0%EB%94%94%EC%B9%B4%ED%8E%98-%EB%B8%94%EB%A1%9C%EA%B7%B8-300%EB%B2%88%EC%A7%B8-%EA%B8%80&quot;&gt;https://velog.io/@yujo/2020-11-24%ED%99%94-TIL-196-%EC%8A%A4%ED%84%B0%EB%94%94%EC%B9%B4%ED%8E%98-%EB%B8%94%EB%A1%9C%EA%B7%B8-300%EB%B2%88%EC%A7%B8-%EA%B8%80&lt;/a&gt;&lt;/p&gt; &lt;p&gt;자바스크립트 10가지 트릭&lt;br /&gt; &lt;a href=&quot;https://blog.bitsrc.io/10-super-useful-tricks-for-javascript-developers-f1b76691199b&quot;&gt;https://blog.bitsrc.io/10-super-useful-tricks-for-javascript-developers-f1b76691199b&lt;/a&gt;&lt;/p&gt; &lt;p&gt;ReadMe 작성 팁&lt;br /&gt; &lt;a href=&quot;https://dev-hyun.tistory.com/147&quot;&gt;https://dev-hyun.tistory.com/147&lt;/a&gt;&lt;/p&gt; &lt;p&gt;배너 마커- 헉 오픈소스 공부도 이걸로 하면 되겠다&lt;br /&gt; &lt;a href=&quot;https://banner.godori.dev/&quot;&gt;https://banner.godori.dev/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;코딩을 배우며 했던 실수들 그리고 실수를 피하는 방법 (vanilla js로 tcp, http.. 내가 하려고 했던게있네)&lt;br /&gt; &lt;a href=&quot;https://medium.com/code-states/%EC%BD%94%EB%94%A9%EC%9D%84-%EB%B0%B0%EC%9A%B8-%EB%95%8C-%ED%96%88%EB%8D%98-%EC%8B%A4%EC%88%98%EB%93%A4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B7%B8-%EC%8B%A4%EC%88%98%EB%93%A4%EC%9D%84-%ED%94%BC%ED%95%98%EB%8A%94-%EB%B2%95-3497a80217ff&quot;&gt;https://medium.com/code-states/%EC%BD%94%EB%94%A9%EC%9D%84-%EB%B0%B0%EC%9A%B8-%EB%95%8C-%ED%96%88%EB%8D%98-%EC%8B%A4%EC%88%98%EB%93%A4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B7%B8-%EC%8B%A4%EC%88%98%EB%93%A4%EC%9D%84-%ED%94%BC%ED%95%98%EB%8A%94-%EB%B2%95-3497a80217ff&lt;/a&gt;&lt;/p&gt; &lt;p&gt;href=’#’과 javascript:void(0)중 무엇을 쓸까&lt;br /&gt; &lt;a href=&quot;https://reiphiel.tistory.com/entry/href-javascript-void-or-hash&quot;&gt;https://reiphiel.tistory.com/entry/href-javascript-void-or-hash&lt;/a&gt;&lt;/p&gt; &lt;p&gt;… 이름&lt;br /&gt; &lt;a href=&quot;https://ko.javascript.info/rest-parameters-spread#ref-416&quot;&gt;https://ko.javascript.info/rest-parameters-spread#ref-416&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;https://ko.javascript.info/destructuring-assignment&quot;&gt;https://ko.javascript.info/destructuring-assignment&lt;/a&gt;&lt;/p&gt; &lt;p&gt;js에서 배열을 복제하는 방법과 성능 비교&lt;br /&gt; &lt;a href=&quot;https://github.com/ivorycirrus/writing/blob/master/laboratory/javascript/array_copy/post_array_clone.md&quot;&gt;https://github.com/ivorycirrus/writing/blob/master/laboratory/javascript/array_copy/post_array_clone.md&lt;/a&gt;&lt;/p&gt; &lt;p&gt;객체에 함수를 등록해서 사용하는 예시(꿀팁)&lt;br /&gt; &lt;a href=&quot;https://gist.github.com/ivorycirrus/8831875b9331d938311f7682500c7002&quot;&gt;https://gist.github.com/ivorycirrus/8831875b9331d938311f7682500c7002&lt;/a&gt;&lt;/p&gt; &lt;p&gt;js를 최적화하는 13가지 팁\ &amp;lt;- 이 글 이해안되는부분 많다. 왜 !...</description>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/JS-study-memo/</link>
        <guid isPermaLink="true">http://localhost:4000/JS-study-memo/</guid>
        
        <category>javascript</category>
        
        <category>tips</category>
      </item>
    
      <item>
        <title>2020-11-20 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 20일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;map을 썼는데 원본 객체가 변해버린 이유&lt;/li&gt; &lt;li&gt;데이터 바인딩을 두고 DOM에 굳이 직접 접근하는 이유&lt;/li&gt; &lt;li&gt;프레임워크를 쓰는 이유&lt;/li&gt; &lt;li&gt;브라우저 성능측정법&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;map을-썼는데-원본-객체가-바뀌어버렸던-이유&quot;&gt;map을 썼는데 원본 객체가 바뀌어버렸던 이유&lt;/h3&gt; &lt;p&gt;내가 &lt;em&gt;구조 분해 할당(destructuring assignment)&lt;/em&gt;을 사용했기 때문이었다.,\&lt;/p&gt; &lt;p&gt;원본도 바꿔버렸던 코드:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blockType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;blockType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rotated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;...</description>
        <pubDate>Fri, 20 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-20-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-20-TIL/</guid>
        
        <category>vue</category>
        
        <category>javascript</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-13 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 13일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;parent가 child를 감싸게 하기&lt;/li&gt; &lt;li&gt;body에 있는 원인을 알수없는 margin 수정&lt;/li&gt; &lt;li&gt;vue에서 v-for안 요소에 접근하기&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;child가-parent를-넘칠떄&quot;&gt;child가 parent를 넘칠떄?&lt;/h3&gt; &lt;p&gt;이렇게 h1이 길어서 parent div를 벗어났다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/26290571/100054351-345cbe80-2e65-11eb-82f5-b979640c449e.png&quot; alt=&quot;overImg&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;source&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.wrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;darkgrey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;...</description>
        <pubDate>Fri, 13 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-13-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-13-TIL/</guid>
        
        <category>css</category>
        
        <category>html</category>
        
        <category>vue</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-12 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 12일 TIL &lt;/p&gt;
&lt;p&gt;오늘 배운 것:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;css로 할 수 있으면 css를 쓰는 것이 좋다&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;css와-js중-무엇으로-구현할까&quot;&gt;css와 js중 무엇으로 구현할까?&lt;/h3&gt;
&lt;p&gt;css로 해결할 수 있다면 css로 해결하는 것이 좋다.&lt;br /&gt;
왜냐하면 css는 멀티쓰레딩이 되지만 js는 싱글스레드기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;에 css를 넣고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 마지막에 js를 넣는 것도 그런 의미다. js가 로딩될때까지 DOM은 그리는것을 멈춘다. 그래서 무거운 js가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head&lt;/code&gt;에 있다면, DOM이 그려지는 것을 막을 수 있는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;브라우저는 어떻게 동작하는가? &lt;a href=&quot;https://d2.naver.com/helloworld/59361&quot;&gt;https://d2.naver.com/helloworld/59361&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;최신 브라우저 내부 살펴보기3 &lt;a href=&quot;https://d2.naver.com/helloworld/5237120&quot;&gt;https://d2.naver.com/helloworld/5237120&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-12-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-12-TIL/</guid>
        
        <category>css</category>
        
        <category>js</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-11 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 11일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;fixed와 absolute를 합치기&lt;/li&gt; &lt;li&gt;scroll 성능 최적화&lt;/li&gt; &lt;li&gt;vue에서 스크롤 이벤트 알아내기&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;fixed와-absolute를-합치기&quot;&gt;fixed와 absolute를 합치기&lt;/h3&gt; &lt;p&gt;가로축으로는 absolute, 세로축으로는 fixed된 엘리먼트를 만들고 싶었다. 엘리먼트의 width가 너무 커서 가로 스크롤이 생길때, 가로는 스크롤링이 가능하고 세로는 fixed로 항상 화면 위쪽에 떠있게 하고 싶었다.&lt;/p&gt; &lt;p&gt;현재 엘리먼트의 상태는 이렇다. 가로축 스크롤을 움직여도 엘리먼트 끝이 보이지 않는다. 수정해보자.&lt;/p&gt; &lt;p&gt;//codepen&lt;/p&gt; &lt;p&gt;방법을 두가지 찾았다. js를 이용하는 방법과, css position을 이용하는 방법이다.&lt;/p&gt; &lt;p&gt;\1. &lt;strong&gt;css sticky 이용&lt;/strong&gt;&lt;br /&gt; 엘리먼트에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position: sticky&lt;/code&gt;를 붙인다. &lt;em&gt;sticky&lt;/em&gt; 를 이용할때는 &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top&lt;/em&gt; 값을 정해주어야 한다! &lt;em&gt;sticky&lt;/em&gt;는 특정 지점까지는 &lt;em&gt;absolute&lt;/em&gt;처럼 동작하고, 특정 지점부터는 &lt;em&gt;fixed&lt;/em&gt;처럼...</description>
        <pubDate>Wed, 11 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-11-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-11-TIL/</guid>
        
        <category>js</category>
        
        <category>스크롤</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-09 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 09일 TIL &lt;/p&gt;

&lt;p&gt;오늘 배운 것 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;vue-eslint가 오동작할때 해결법&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;eslint에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vue/unused-var: warn&lt;/code&gt;을 추가해도 에러줄이 안사라질때&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/settings.json&lt;/code&gt;에 아래 줄을 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vetur.validation.template: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;eslint-plugin-vue 유저 가이드:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://eslint.vuejs.org/user-guide/#faq&quot;&gt;https://eslint.vuejs.org/user-guide/#faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-09-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-09-TIL/</guid>
        
        <category>vue</category>
        
        <category>eslint</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-06 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 06일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;kendoGrid의 column 하나를 안 보이게 하기&lt;/li&gt; &lt;li&gt;$nextTick()&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;kendogrid-column-하나-숨기기&quot;&gt;kendoGrid column 하나 숨기기&lt;/h3&gt; &lt;p&gt;가능한 방법:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;setOptions()를 이용하기&lt;/li&gt; &lt;li&gt;column에 hidden: true 넣기&lt;/li&gt; &lt;li&gt;column[i].hide() 메소드 이용하기&lt;/li&gt; &lt;li&gt;column[i].width = ‘0px’&lt;/li&gt; &lt;li&gt;css 추가하기&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;내가 사용한 코드:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;데이터를-바꿨는데-dom에-나타나지-않을때&quot;&gt;데이터를 바꿨는데 DOM에 나타나지 않을때&lt;/h3&gt; &lt;p&gt;데이터를 바꿨는데 DOM에 나타나지 않았다.&lt;br /&gt; 문제상황은 이렇다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;vue component의 데이터를 변경함&lt;/li&gt; &lt;li&gt;화면에 변경된사항이 반영되지 않음&lt;/li&gt; &lt;li&gt;드롭박스에서 다른 선택지를 고르면 변경사항이 적용됨(다른 선택지에 적용)&lt;/li&gt; &lt;li&gt;원래 바꾸려던 선택지의...</description>
        <pubDate>Fri, 06 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-06-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-06-TIL/</guid>
        
        <category>nextTick</category>
        
        <category>DOM</category>
        
        <category>vue</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-03 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 03일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;함수 표현식과 선언식 차이&lt;/li&gt; &lt;li&gt;IIFE: 즉시 실행하는 함수 표현식&lt;/li&gt; &lt;li&gt;같은 객체 안 다른 프로퍼티에 접근하는 방법&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;함수-표현식-vs-선언식&quot;&gt;함수 표현식 vs 선언식&lt;/h2&gt; &lt;p&gt;함수 선언식은 자바스크립트의 실행 컨텍스트에 로딩되어 있다. 따라서 언제든지 호출 가능하다! 선언 전에도 호출 가능. 함수 호이스팅이 되기 때문이다.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//가능. 호이스팅된다.&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//함수 선언식&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;world!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;하지만, 변수에 선언한 함수 표현식은 호이스팅이 되지 않는다(심지어 var라도). 따라서 함수를 표현한 이후에 사용할 수 있다.&lt;/p&gt; &lt;div class=&quot;language-js...</description>
        <pubDate>Tue, 03 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-03-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-03-TIL/</guid>
        
        <category>함수</category>
        
        <category>표현식</category>
        
        <category>선언식</category>
        
        <category>IIFE</category>
        
        <category>this</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-11-02 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 11월 02일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;vue 형제 컴포넌트끼리 주고받기&lt;/li&gt; &lt;li&gt;this 실무 예제&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;vue-형제-컴포넌트&quot;&gt;vue 형제 컴포넌트&lt;/h3&gt; &lt;p&gt;같은 부모 아래 있는 컴포넌트를 형제 컴포넌트라고 한다. 형제 컴포넌트끼리 데이터 주고받는게 원칙적으로는 불가능하다. 어떻게 통신할 수 있을까? 데이터를 부모 컴포넌트에 올린다!&lt;/p&gt; &lt;h2 id=&quot;this-실무-예제&quot;&gt;this 실무 예제&lt;/h2&gt; &lt;p&gt;사실 아직 못 풀었다.&lt;/p&gt; &lt;p&gt;아래와 같은 구조로 되어있을때 (원래 코드에서는 data를 또 vue가 감싸고 있다.)&lt;br /&gt; a()에서는 COM_LIMIT을 사용하고, b에서는 a의 결과를 이용하려고 한다.&lt;/p&gt; &lt;p&gt;this의 범위가 이것저것 섞여서 헷갈린다. 이 예제를 기준으로 정리해본다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a() 에서 COM_LIMIT에 접근하는 방법 - 없다! 이유: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup()&lt;/code&gt;이 즉시 실행 함수이기 때문이다.&lt;/li&gt; &lt;li&gt;b() 에서...</description>
        <pubDate>Mon, 02 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-02-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-02-TIL/</guid>
        
        <category>this</category>
        
        <category>vue</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-27 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 27일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;크롬 개발자 도구&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;크롬-개발자-도구&quot;&gt;크롬 개발자 도구&lt;/h2&gt; &lt;p&gt;개인적으로 엣지를 사용해서 엣지 개발자 도구를 사용하지만 크롬이랑 똑같다. 엣지가 크로미움을 사용하기 때문일까?&lt;/p&gt; &lt;p&gt;마우스 클릭 이벤트에 중단점을 걸었는데 jquery에 걸린다. 아니 어쩌라고 jquery를 수정하냐?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;[] 중단점 걸었더니 jQuery 걸리는것 해결&lt;/li&gt; &lt;li&gt;[] vue.js 디버깅하기&lt;/li&gt; &lt;li&gt;[] vscode에서 중단점 걸었는데 왜 안걸려?&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;jquery에-중단점이-걸린다&quot;&gt;jquery에 중단점이 걸린다&lt;/h3&gt; &lt;p&gt;크롬 개발자 도구를 이용한 자바스크립트 디버깅 &lt;a href=&quot;https://subicura.com/2018/02/14/javascript-debugging.html&quot;&gt;https://subicura.com/2018/02/14/javascript-debugging.html&lt;/a&gt;&lt;/p&gt; &lt;p&gt;jQuery같은 라이브러리를 쓰면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click()&lt;/code&gt;같은 이벤트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jQuery.js&lt;/code&gt;에서 이벤트가 일어난다. 이벤트를 라이브러리에 위임하기 때문이다.&lt;/p&gt; &lt;p&gt;jQuery말고 원래 소스에 중단점을 거는 방법이 없을까?&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blackboxing&lt;/code&gt;을 이용한다.&lt;/p&gt;...</description>
        <pubDate>Tue, 27 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-27-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-27-TIL/</guid>
        
        <category>개발자도구</category>
        
        <category>디버깅</category>
        
        <category>vue</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-26 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 26일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;vuex, vue router&lt;/li&gt; &lt;li&gt;ES6 기능&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;vuex-vue-router&quot;&gt;vuex, vue router&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;vue.js : 부품을 만든다&lt;/li&gt; &lt;li&gt;Vuex : 상태 관리 전용 라이브러리. 여러 컴포넌트가 데이터를 공유할 수 있게 해준다.&lt;/li&gt; &lt;li&gt;Vue Router : 라우팅 전용 라이브러리. 여러 화면을 연결해서 SPA 만들수있게 해준다.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;vue&quot;&gt;.vue&lt;/h3&gt; &lt;p&gt;평소에 보던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vue&lt;/code&gt; 파일은 &lt;strong&gt;단일 파일 컴포넌트&lt;/strong&gt;를 말한다.(SFC: Single File Components)&lt;br /&gt; HTML, CSS, JS를 따로따로 만들 필요없이 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vue&lt;/code&gt;파일 하나 안에 다 작성하면 된다!&lt;br /&gt; 물론 외부에서 가져와서 사용하는것도 가능하다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;~&quot;&amp;gt;&lt;/code&gt; 이렇게.&lt;br /&gt; 다만 .vue파일은 vue만의 독자적인 파일...</description>
        <pubDate>Mon, 26 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-26-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-26-TIL/</guid>
        
        <category>vue</category>
        
        <category>ES6</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-23 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 23일 TIL &lt;/p&gt;

&lt;p&gt;오늘 배운 것 :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;윈도우에서 특수문자 입력하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;특수문자-입력하기&quot;&gt;특수문자 입력하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt&lt;/code&gt; + 우측 키패드 숫자.
입력하면 특수문자가 나온다. 신기하다!&lt;/p&gt;

&lt;p&gt;ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0169&lt;/code&gt; = ©&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

</description>
        <pubDate>Fri, 23 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-23-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-23-TIL/</guid>
        
        <category>단축키</category>
        
        <category>특수문자</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-22 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 22일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;vue component끼리 통신&lt;/li&gt; &lt;li&gt;템플릿의 일부를 바꾸고 싶을때 : slot&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;vue-component끼리-통신&quot;&gt;vue component끼리 통신&lt;/h2&gt; &lt;h3 id=&quot;이벤트-버스&quot;&gt;이벤트 버스&lt;/h3&gt; &lt;p&gt;부모-자식 컴포넌트의 경우는 props나 emit를 이용하여 통신할 수 있었다.&lt;br /&gt; 다른 컴포넌트끼리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이벤트 버스&lt;/code&gt;를 이용하여 통신한다.&lt;/p&gt; &lt;h2 id=&quot;slot&quot;&gt;slot&lt;/h2&gt; &lt;p&gt;자식 컴포넌트의 템플릿에 뭔가를 삽입하고 싶다면? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slot&lt;/code&gt;을 이용한다.&lt;br /&gt; 부모 컴포넌트에서 작성한 내용이 자식 컴포넌트 안에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt;에 삽입된다.&lt;/p&gt; &lt;p&gt;참고로 슬롯은 &lt;strong&gt;&lt;em&gt;컨텐츠를 정의한 쪽&lt;/em&gt;&lt;/strong&gt;의 스코프를 가진다. 부모쪽의 스코프를 가진다는 말이다.&lt;br /&gt; 즉, 자식 스코프에 접근할 수 없다!&lt;br /&gt; =&amp;gt; 접근하고 싶다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slot-scope&lt;/code&gt;를 이용한다.&lt;/p&gt; &lt;p class=&quot;callout&quot;&gt; ❗...</description>
        <pubDate>Thu, 22 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-22-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-22-TIL/</guid>
        
        <category>vue</category>
        
        <category>component</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-21 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 21일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;vue 컴포넌트&lt;/li&gt; &lt;li&gt;컴포넌트끼리 통신하기&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;vue-components&quot;&gt;vue components&lt;/h2&gt; &lt;p&gt;컴포넌트는 클래스와 비슷한 개념이라고 생각하면 된다. 클래스를 정의하고 인스턴스를 생성해서 사용하듯이, 컴포넌트를 정의하고 인스턴스를 생성해서 사용하면 된다.&lt;/p&gt; &lt;p&gt;컴포넌트는 루트 인스턴스가 생성되기 전에 정의해야 한다. 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Vue()&lt;/code&gt;전에 작성한다!&lt;br /&gt; 기본 문법같은건 홈페이지 보면 바로 나오니까 생략.&lt;/p&gt; &lt;p&gt;컴포넌트와 루트(new Vue)는 비슷하다 .컴포넌트도 data, methods를 정의할 수 있다. 물론 템플릿 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\{\{mustache\}\}&lt;/code&gt; 를 사용할 수도 있다.&lt;br /&gt; 다만 다른 점은 다음과 같다:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;컴포넌트엔 el 대신 template을 쓴다&lt;/li&gt; &lt;li&gt;컴포넌트의 &lt;span class=&quot;ud&quot;&gt;data는 객체를 리턴하는 함수여야 한다.&lt;/span&gt;&lt;/li&gt; &lt;li&gt;컴포넌트의 템플릿은 요소가 한개여야...</description>
        <pubDate>Wed, 21 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-21-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-21-TIL/</guid>
        
        <category>vue</category>
        
        <category>component</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-20 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 20일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;mousedown/mouseup은 무슨 버튼인지 명시해주어야 한다.&lt;/li&gt; &lt;li&gt;vue내에 작성한 함수는 v-on으로 사용해야 한다.&lt;/li&gt; &lt;li&gt;리스트의 요소를 변경할 때는 인덱스([])말고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vue.set&lt;/code&gt; 메소드 이용&lt;/li&gt; &lt;li&gt;포인터가 필요하면 객체를 쓴다&lt;/li&gt; &lt;li&gt;산출속성은 캐시, 메소드는 캐시 x&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;mouse-event&quot;&gt;mouse event&lt;/h2&gt; &lt;p&gt;mousedown/up은 해당 이벤트 핸들러에 마우스의 어떤 버튼을 조작했는지 명시해주어야한다. (왼쪽,오른쪽,가운데…) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event.button&lt;/code&gt;을 이용한다.&lt;/p&gt; &lt;p&gt;비슷한 기능의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event.which&lt;/code&gt;는 이제 사용하지 않는다.&lt;/p&gt; &lt;h2 id=&quot;vue-내에-작성한-함수&quot;&gt;vue 내에 작성한 함수&lt;/h2&gt; &lt;p&gt;v-on:click=”func” //()없음&lt;br /&gt; 이렇게 사용해야 한다.&lt;/p&gt; &lt;p&gt;vue안에 작성하고 html상에선 아래처럼 사용하면? HTML docu에 func라는 함수가 없다며 에러가 뜬다.&lt;br /&gt; 반대도 마찬가지다. 바깥에서 작성한 함수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v-on&lt;/code&gt;으로 이용할...</description>
        <pubDate>Tue, 20 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-20-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-20-TIL/</guid>
        
        <category>javascript</category>
        
        <category>event</category>
        
        <category>error</category>
        
        <category>vue</category>
        
        <category>pointer</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-19 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 19일 TIL &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;&lt;/li&gt; &lt;li&gt;vue 공부&lt;/li&gt; &lt;li&gt;HTML 속성엔 kebab-case를 사용하자!&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;svn-vs-git&quot;&gt;‘SVN’ vs ‘GIT’&lt;/h2&gt; &lt;p&gt;익숙한 GIT. 형상관리툴이다. git을 지원해주는 사이트로는 대표적으로 깃헙이 있다. 현재 글을 쓰고 있는 블로그도 깃헙을 이용하여 운영 중이다!&lt;/p&gt; &lt;p&gt;회사에서는 SVN을 이용한 프로젝트가 압도적으로 많다고 한다. SVN이 무엇인가 찾아 정리해본다.&lt;/p&gt; &lt;p&gt;GIT을 먼저 사용해본 입장에서 작성한다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;저장소&lt;/strong&gt; GIT은 각 로컬 저장소가 존재하나, SVN은 존재하지 않는다.&lt;br /&gt; SVN은 바로 중앙저장소(Trunk)에 commit된다. (내 로컬에 먼저 저장하지 않음!) 고로 내가 잘못 commit하면? 전체 시스템이 마비될수도있다…&lt;/p&gt; &lt;p&gt;그러면 내 로컬소스를 따로 어떻게 관리하느냐?&lt;br /&gt; branch를 만든다. local에 trunk의...</description>
        <pubDate>Mon, 19 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-19-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-19-TIL/</guid>
        
        <category>javascript</category>
        
        <category>vue</category>
        
        <category>svn</category>
        
        <category>git</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-10-16 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 16일 TIL &lt;/p&gt;

&lt;p&gt;오늘 배운 것 :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;arrow function 정리(https://sunmon.github.io/js-arrow-function/)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 16 Oct 2020 13:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-16-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-16-TIL/</guid>
        
        <category>javascript</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>javascript의 화살표 함수와 this</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 JS에서 화살표함수(arrow function)이 어떻게 동작하는지 알아본다. &lt;/p&gt; &lt;p&gt;이전 포스팅(&lt;a href=&quot;https://sunmon.github.io/js-this/&quot;&gt;javascript의_this&lt;/a&gt;)에서 중첩 함수는 this가 예상대로 동작하지 않는 문제점을 알 수 있었다.&lt;/p&gt; &lt;p&gt;ES6에서 추가된 화살표함수를 사용하면 중첩 함수에서도 this가 객체를 가리키도록 만들 수 있다.&lt;/p&gt; &lt;h2 id=&quot;arrow-function--화살표-함수&quot;&gt;Arrow function : 화살표 함수&lt;/h2&gt; &lt;p&gt;우선 화살표함수가 무엇인가부터 정리해보자.&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 코드처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt; 를 이용하여 표현하는 함수식이 &lt;strong&gt;&lt;em&gt;화살표 함수&lt;/em&gt;&lt;/strong&gt;다.&lt;br /&gt; &lt;em&gt;function()&lt;/em&gt;으로 작성하던 함수를 좀 더 간결하게 표현한 것이다.&lt;/p&gt; &lt;p&gt;화살표 함수를 사용하는 법은 간단하다. 함수에서 &lt;em&gt;function&lt;/em&gt;이라는 글자를 빼고, &lt;em&gt;=&amp;gt;&lt;/em&gt;를 넣으면 된다.\&lt;/p&gt;...</description>
        <pubDate>Fri, 16 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/js-arrow-function/</link>
        <guid isPermaLink="true">http://localhost:4000/js-arrow-function/</guid>
        
        <category>web</category>
        
        <category>javascript</category>
        
        <category>web</category>
      </item>
    
      <item>
        <title>javascript의 'this'</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 JS에서 this가 어떻게 동작하는지 알아본다. &lt;/p&gt; &lt;p&gt;cpp이나 java로 했던 것처럼, 익숙하게 js로도 this를 사용했지만 실행결과가 예상했던 것과 달라 당황했던 일이 있을 것이다.&lt;br /&gt; 똑같은 this라는 단어를 사용하지만 js에서는 this가 바인딩되는 방법이 다르기 때문이다.&lt;br /&gt; &lt;span class=&quot;ud&quot;&gt; js의 this는 this를 어떻게 호출했느냐에 따라 달라진다.&lt;/span&gt;. 런타임에 정해진다는 말이다.&lt;/p&gt; &lt;h2 id=&quot;메서드에서의-this&quot;&gt;메서드에서의 this&lt;/h2&gt; &lt;p&gt;this는 호출하는 방법에 따라 가리키는 것이 변한다는 말을 생각해보자.&lt;br /&gt; this가 무언가를 가리키기는 한다는데, 그것이 무엇일까? 바로 &lt;strong&gt;호출하는 주체&lt;/strong&gt;를 말한다.&lt;br /&gt; 메서드&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;에서 this를 사용하면 this는 해당 객체를 가리킨다.&lt;/p&gt; &lt;p&gt;예시:&lt;/p&gt; &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elsa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span...</description>
        <pubDate>Thu, 15 Oct 2020 13:21:00 +0900</pubDate>
        <link>http://localhost:4000/js-this/</link>
        <guid isPermaLink="true">http://localhost:4000/js-this/</guid>
        
        <category>web</category>
        
        <category>javascript</category>
        
        <category>web</category>
      </item>
    
      <item>
        <title>2020-10-15 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 10월 15일 TIL &lt;/p&gt;

&lt;p&gt;오늘 배운 것 :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;this 정리 (링크: &lt;a href=&quot;https://sunmon.github.io/js-this/&quot;&gt;javascript의 this&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;repo마다 서로 다른 git id 사용하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자꾸 헷갈리던 this를 이 기회에 정리했다.&lt;br /&gt;
다른 repo에 각각 local id를 설정하는 법도 알았다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;프로젝트 저장소마다 다른 계정 정보 사용하기:&lt;br /&gt;
&lt;a href=&quot;https://awesometic.tistory.com/128&quot;&gt;https://awesometic.tistory.com/128&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Oct 2020 13:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-15-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-15-TIL/</guid>
        
        <category>javascript</category>
        
        <category>this</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>new post 마크가 안 사라져요!</title>
        <description>&lt;p class=&quot;callout&quot;&gt; 💡 newpost 마크가 안 사라지는 이유를 알아본다&lt;/p&gt;

&lt;p&gt;현재 jekflix테마를 사용하고 있다. 이 테마는 7일 이내에 새로 작성한 글이면 ‘new post’ 딱지를 표시한다.
맨 위 사진처럼 말이다.&lt;/p&gt;

&lt;p&gt;그런데 이주가 지난 오늘(2020-09-25)도 딱지가 붙어있는것을 발견했다.&lt;/p&gt;

&lt;p&gt;이는 깃블로그가 정적인 블로그기 때문이다. 새 글을 올려 (혹은 글을 수정해) 새로운 내용을 커밋해주면, 깃헙이 새로 블로그를 렌더링하기때문에 딱지를 뗄 수 있다.&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/new-post-dissable/</link>
        <guid isPermaLink="true">http://localhost:4000/new-post-dissable/</guid>
        
        <category>jekflix</category>
        
        <category>tips</category>
      </item>
    
      <item>
        <title>포스트 코로나 시대, 웹의 현재와 미래 1 -세션2</title>
        <description>&lt;p&gt;9월 10일 유투브에서 진행된 ‘포스트 코로나 시대, 웹의 현재와 미래’ 강연 내용 정리 (두번째 세션)&lt;br /&gt; 주최: KISA, 과학기술정보통신부&lt;br /&gt; 유투브 링크: &lt;a href=&quot;https://www.youtube.com/watch?v=1FviNDmfvEA&quot;&gt;https://www.youtube.com/watch?v=1FviNDmfvEA&lt;/a&gt;&lt;/p&gt; &lt;p&gt;발표자료는 추후 koreahtml5.kr에 공유 할 예정&lt;br /&gt; 이 포스팅에는 쉬는시간 후 세션 내용을 기록했다.&lt;/p&gt; &lt;h2 id=&quot;다양한-기능이-웹-속으로&quot;&gt;다양한 기능이 웹 속으로!&lt;/h2&gt; &lt;p&gt;목차&lt;/p&gt; &lt;ol&gt; &lt;li&gt;성능 관련 기능들&lt;/li&gt; &lt;li&gt;보안 관련 기능들&lt;/li&gt; &lt;li&gt;주요 웹플랫폼 기능들&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;web-performance-specs&quot;&gt;Web Performance specs&lt;/h3&gt; &lt;p&gt;웹 성능 측정&lt;br /&gt; 웹페이지 로딩 성능도 있고, 그 후 사용자 입력에 대한 처리도 있음&lt;br /&gt; ⇒ 사용자 중심적인 성능 측정!&lt;/p&gt; &lt;p&gt;&lt;em&gt;사용자의 반응을 얼마나 빠르게 응답하는지&lt;/em&gt;로 측정&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Web Vitals&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;구글에서 만든 웹 지표.&lt;br /&gt; LCP(가장 큰 콘텐츠가 언제 보였냐), FID(처음 인풋...</description>
        <pubDate>Thu, 10 Sep 2020 15:30:00 +0900</pubDate>
        <link>http://localhost:4000/0910-corona-web-2/</link>
        <guid isPermaLink="true">http://localhost:4000/0910-corona-web-2/</guid>
        
        <category>web</category>
        
        <category>trend</category>
        
        <category>세미나</category>
        
        <category>web</category>
      </item>
    
      <item>
        <title>포스트 코로나 시대, 웹의 현재와 미래 1 -세션1</title>
        <description>&lt;p&gt;9월 10일 유투브에서 진행된 ‘포스트 코로나 시대, 웹의 현재와 미래’ 강연 내용 정리 (첫번째 시간)&lt;br /&gt; 주최: KISA, 과학기술정보통신부&lt;br /&gt; 유투브 링크: &lt;a href=&quot;https://www.youtube.com/watch?v=1FviNDmfvEA&quot;&gt;https://www.youtube.com/watch?v=1FviNDmfvEA&lt;/a&gt;&lt;/p&gt; &lt;p&gt;발표자료는 추후 koreahtml5.kr에 공유 할 예정&lt;br /&gt; 이 포스팅은 쉬는시간 전 첫번째 시간을 기록했다.&lt;/p&gt; &lt;h2 id=&quot;웹-기술-트렌드-살펴보기-ⅰ&quot;&gt;웹 기술 트렌드 살펴보기 Ⅰ&lt;/h2&gt; &lt;p&gt;W3C 웹 표준기술 간략히 훑어보기&lt;/p&gt; &lt;h3 id=&quot;웹-vs-앱&quot;&gt;웹 vs 앱&lt;/h3&gt; &lt;p&gt;데스크탑은 대부분 웹 브라우저에서 진행 (검색, 미디어, 회사업무 등)&lt;br /&gt; 모바일은 대부분 앱으로 제공. 브라우저보다 편리함&lt;br /&gt; 그런데 앱 안에도 웹이 들어가있음&lt;br /&gt; ex) 카카오톡 #기능. 카카오톡 브라우저&lt;/p&gt; &lt;p&gt;브라우저의 대부분은 &lt;em&gt;크로미움&lt;/em&gt;을 기반으로 제작됐다.&lt;br /&gt; 크로미움은 구글의 오픈소스 브라우저.&lt;/p&gt; &lt;h3 id=&quot;w3c&quot;&gt;W3C&lt;/h3&gt; &lt;p&gt;Working group. 웹 표준화를 만든다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;HTML...</description>
        <pubDate>Thu, 10 Sep 2020 14:00:00 +0900</pubDate>
        <link>http://localhost:4000/0910-corona-web-1/</link>
        <guid isPermaLink="true">http://localhost:4000/0910-corona-web-1/</guid>
        
        <category>web</category>
        
        <category>trend</category>
        
        <category>세미나</category>
        
        <category>web</category>
      </item>
    
      <item>
        <title>BOJ 2038_골롱수열</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 백준 #2038 골롱수열 &lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;BOJ 2038 골롱수열 : &lt;a href=&quot;https://www.acmicpc.net/problem/2038&quot;&gt;https://www.acmicpc.net/problem/2038&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;골롱수열 문제. dp문제인것같지만 나는 그냥 완전탐색으로 풀었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단조수열&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;f(k+1)&amp;gt;=f(k)&lt;/em&gt; 인 수열을 말한다.&lt;/p&gt;

&lt;p&gt;단조수열의 특성과, k가 f(k)에 k번 나온다는 골롱수열의 특징을 조합해보면,
골롱수열은 단 한개로 특정될수밖에 없다. 해보면 나온다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;골롱수열&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://res.cloudinary.com/dtttkj2mc/image/upload/v1599632628/post/algorithms/baekjoon/2038-1_rkdesj.jpg&quot; alt=&quot;골룽&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;시간초과&quot;&gt;시간초과&lt;/h4&gt;

&lt;p&gt;시간초과가 났었다.&lt;br /&gt;
시간을 절약하기 위해 f(k)를 각 k에 대해 저장하지 않고, 대신 ret이라는 배열에 f(k)의 (시작인덱스, 끝 인덱스)를 저장했다.&lt;/p&gt;

&lt;p&gt;ret[k]에 f(x)=k인 x값들의 범위를 저장했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dtttkj2mc/post/algorithms/baekjoon/2038-2_jy7ibu.jpg&quot; alt=&quot;골롱2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;p&gt;정답, 26572KB, 16ms&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/24851c7b1ed06cbcf23d13c4168fd1ef.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Tue, 08 Sep 2020 20:00:00 +0900</pubDate>
        <link>http://localhost:4000/BOJ-2038/</link>
        <guid isPermaLink="true">http://localhost:4000/BOJ-2038/</guid>
        
        <category>백준</category>
        
        <category>알고리즘</category>
        
        <category>완전탐색</category>
        
        <category>algorithm</category>
      </item>
    
      <item>
        <title>2020-09-07 TIL</title>
        <description>&lt;p class=&quot;callout&quot;&gt;💡 지표로 삼을 문구 &lt;/p&gt; &lt;p&gt;오늘 배운 것 :&lt;/p&gt; &lt;ol&gt; &lt;li&gt;완벽한 계획보다 빠른 시도가 중요하다&lt;/li&gt; &lt;li&gt;시간은 양이 아닌 밀도&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;완벽한-계획보다-빠른-시도가-중요하다&quot;&gt;완벽한 계획보다 빠른 시도가 중요하다&lt;/h2&gt; &lt;p&gt;&lt;span class=&quot;ud&quot;&gt;계획은 어차피 완벽할 수 없다.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;리스크를 감수하고, 빠르게 테스트하며, 계속해서 수정해 나가는 것이 성공 가능성을 높이는 방법이다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;일단 해보자,는 마음으로 시작하고 있나?&lt;/li&gt; &lt;li&gt;완벽에만 매달리지 않고, 중간에 몇번이고 공유하며 피드백을 받고 있나?&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;시간은-양이-아닌-밀도&quot;&gt;시간은 양이 아닌 밀도&lt;/h2&gt; &lt;p&gt;&lt;span class=&quot;ud&quot;&gt;그냥 열심히 일할 때가 가장 위험한 순간이다.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;내가 지금 누구를 위해, 무엇을, 왜 하려는 거인지를 분명이 해야 한다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;지금 하고 있는 일의 우선순위를 알고 있나?&lt;/li&gt; &lt;li&gt;몇 시간 일했는지보다, 어떤 문제를 해결했는지를 중요하게...</description>
        <pubDate>Mon, 07 Sep 2020 20:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-09-07-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-09-07-TIL/</guid>
        
        <category>라인북</category>
        
        <category>개발자</category>
        
        <category>TIL</category>
      </item>
    
      <item>
        <title>2020-09-06 TIL</title>
        <description>&lt;p&gt;오늘은 웹 북마크를 만든다고 시간을 많이 보냈다.&lt;br /&gt; 오늘 한 고민과 질문들을 적어보았다.&lt;/p&gt; &lt;p class=&quot;callout&quot;&gt; 💡 web bookmark를 만들면서 한 고민 &lt;br /&gt; - jekyll에서 include의 parameter를 어떻게 넘기지?&lt;br /&gt; - web bookmark의 내용은 어디서 가져오는가?&lt;br /&gt; - url 링크에 있는 metadata는 어떻게 가져올까?&lt;br /&gt; - fetch api를 사용하는 방법은?&lt;br /&gt; - CORS 에러&lt;br /&gt; - JSONP를 이용하여 CORS 우회&lt;br /&gt; - Webpack&lt;br /&gt; &lt;/p&gt; &lt;p&gt;질문이 꼬리에 꼬리를 물고 나왔다. 진행하며 나온 질문들을 순차적으로 하나씩 적어보았다.&lt;/p&gt; &lt;h2 id=&quot;jekyll에서-parameter-넘기기&quot;&gt;Jekyll에서 parameter 넘기기&lt;/h2&gt; &lt;p&gt;web bookmark용 html을 새로 작성했다. 웹 북마크가 필요할때마다 해당 html을 include하여 사용할 것이다.&lt;/p&gt; &lt;p&gt;파라미터 my_url로 https://example.com을 넘겨주기 - &lt;strong&gt;til.md&lt;/strong&gt;&lt;/p&gt; &lt;div...</description>
        <pubDate>Sun, 06 Sep 2020 23:30:00 +0900</pubDate>
        <link>http://localhost:4000/2020-09-06-TIL/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-09-06-TIL/</guid>
        
        <category>Javascript</category>
        
        <category>jekyll</category>
        
        <category>web bookmark</category>
        
        <category>fetch</category>
        
        <category>CORS</category>
        
        <category>TIL</category>
      </item>
    
  </channel>
</rss>
